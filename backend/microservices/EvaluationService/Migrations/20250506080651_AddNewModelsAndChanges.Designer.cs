// <auto-generated />
using EvaluationService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EvaluationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506080651_AddNewModelsAndChanges")]
    partial class AddNewModelsAndChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EvaluationService.Models.Evaluation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EvaluationTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("NoteGlobale")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EvaluationTypeId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("EvaluationService.Models.EvaluationType", b =>
                {
                    b.Property<int>("EvaluationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaluationTypeId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EvaluationTypeId");

                    b.ToTable("EvaluationTypes");
                });

            modelBuilder.Entity("EvaluationService.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("EvaluationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("TexteQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("EvaluationTypeId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("EvaluationService.Models.Reponse", b =>
                {
                    b.Property<int>("ReponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReponseId"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("ReponseText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReponseId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("reponses");
                });

            modelBuilder.Entity("EvaluationService.Models.Evaluation", b =>
                {
                    b.HasOne("EvaluationService.Models.EvaluationType", "EvaluationType")
                        .WithMany()
                        .HasForeignKey("EvaluationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationType");
                });

            modelBuilder.Entity("EvaluationService.Models.Question", b =>
                {
                    b.HasOne("EvaluationService.Models.EvaluationType", "EvaluationType")
                        .WithMany()
                        .HasForeignKey("EvaluationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationType");
                });

            modelBuilder.Entity("EvaluationService.Models.Reponse", b =>
                {
                    b.HasOne("EvaluationService.Models.Evaluation", "Evaluation")
                        .WithMany("Reponses")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaluationService.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EvaluationService.Models.Evaluation", b =>
                {
                    b.Navigation("Reponses");
                });
#pragma warning restore 612, 618
        }
    }
}
